<Activity mc:Ignorable="sap sap2010" x:Class="TestTakeAndSaveScreenshot" mva:VisualBasic.Settings="{x:Null}" sap:VirtualizedContainerService.HintSize="1112,3120" sap2010:WorkflowViewState.IdRef="TestTakeAndSaveScreenshot_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uta="clr-namespace:UiPath.Testing.Activities;assembly=UiPath.Testing.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="44">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.Testing.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="42">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Cryptography</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="TestTakeAndSaveScreenshot" sap:VirtualizedContainerService.HintSize="618,2915" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="commonDataDirectory" />
      <Variable x:TypeArguments="x:String" Name="testScreenshotFolder" />
      <Variable x:TypeArguments="x:Boolean" Name="assertResult" />
      <Variable x:TypeArguments="x:String" Name="testScreenshotFileName" />
      <Variable x:TypeArguments="x:String" Name="assertMessage" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="... Given" sap:VirtualizedContainerService.HintSize="576,363" sap2010:WorkflowViewState.IdRef="Sequence_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Run the process to obtain the RPA data directory and save the result in 'commonDataDirectory'." DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="334,129" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="GetCommonDataDirectory.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <OutArgument x:TypeArguments="x:String" x:Key="CommonDataDirectory">
            <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="commonDataDirectory" />
          </OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <Assign sap2010:Annotation.AnnotationText="Set the 'Screenshot' folder to be a sub-directory within the RPA data directory." sap:VirtualizedContainerService.HintSize="334,102" sap2010:WorkflowViewState.IdRef="Assign_1">
        <Assign.To>
          <OutArgument x:TypeArguments="x:String">[testScreenshotFolder]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="x:String">[System.IO.Path.Combine(commonDataDirectory, ".\Screenshots\")]</InArgument>
        </Assign.Value>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </Assign>
    </Sequence>
    <Sequence DisplayName="... When" sap:VirtualizedContainerService.HintSize="576,2227" sap2010:WorkflowViewState.IdRef="Sequence_3">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="484,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Testing 'TakeAndSaveScreenshot': testing with default input arguments&quot;]" />
      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Test the process to take screenshots using default input arguments." DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="484,129" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="TakeAndSaveScreenshot.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="OutputFolder" />
          <InArgument x:TypeArguments="x:String" x:Key="OutputFileName" />
          <OutArgument x:TypeArguments="x:String" x:Key="ProcessMessage">
            <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="assertMessage" />
          </OutArgument>
          <OutArgument x:TypeArguments="x:Boolean" x:Key="ProcessSuccessful">
            <mva:VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="assertResult" />
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="ScreenshotFilePath">
            <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="testScreenshotFileName" />
          </OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <If sap2010:Annotation.AnnotationText="If a screenshot was successfuly taken then delete the screenshot file and continue with further testing. Otherwise throw an exception." Condition="[assertResult = True]" sap:VirtualizedContainerService.HintSize="484,254" sap2010:WorkflowViewState.IdRef="If_1">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <ui:Delete ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Delete the screenshot and continue with further testing." sap:VirtualizedContainerService.HintSize="200,64" sap2010:WorkflowViewState.IdRef="Delete_1" Path="[testScreenshotFileName]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:Delete>
        </If.Then>
        <If.Else>
          <Throw sap2010:Annotation.AnnotationText="Throw an exception as a away to halt testing." Exception="[new Exception(String.Format(&quot;Assertion failed. Message '{0}'&quot;, assertMessage))]" sap:VirtualizedContainerService.HintSize="200,64" sap2010:WorkflowViewState.IdRef="Throw_1">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Throw>
        </If.Else>
      </If>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="484,91" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Testing 'TakeAndSaveScreenshot': successfully tested with default input arguments&quot;]" />
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="484,91" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[&quot;Testing 'TakeAndSaveScreenshot': testing with given filename&quot;]" />
      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Test the process to take screenshots using a given filename in the default directory." DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="484,129" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="TakeAndSaveScreenshot.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="OutputFolder" />
          <InArgument x:TypeArguments="x:String" x:Key="OutputFileName">
            <Literal x:TypeArguments="x:String">test-screenshot.png</Literal>
          </InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="ProcessMessage">
            <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="assertMessage" />
          </OutArgument>
          <OutArgument x:TypeArguments="x:Boolean" x:Key="ProcessSuccessful">
            <mva:VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="assertResult" />
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="ScreenshotFilePath">
            <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="testScreenshotFileName" />
          </OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <If sap2010:Annotation.AnnotationText="If a screenshot was successfuly taken then delete the screenshot file and continue with further testing. Otherwise throw an exception." Condition="[assertResult = True]" sap:VirtualizedContainerService.HintSize="484,254" sap2010:WorkflowViewState.IdRef="If_2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <ui:Delete ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Delete the screenshot and continue with further testing." sap:VirtualizedContainerService.HintSize="200,64" sap2010:WorkflowViewState.IdRef="Delete_2" Path="[testScreenshotFileName]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:Delete>
        </If.Then>
        <If.Else>
          <Throw sap2010:Annotation.AnnotationText="Throw an exception as a away to halt testing." Exception="[new Exception(String.Format(&quot;Assertion failed. Message '{0}'&quot;, assertMessage))]" sap:VirtualizedContainerService.HintSize="200,64" sap2010:WorkflowViewState.IdRef="Throw_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Throw>
        </If.Else>
      </If>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="484,91" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info" Message="[&quot;Testing 'TakeAndSaveScreenshot': successfully tested with given filename&quot;]" />
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="484,91" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[&quot;Testing 'TakeAndSaveScreenshot': testing with given filename and screenshots sub-directory of RPA data directory&quot;]" />
      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Test the process to take screenshots using a given filename in the sub-directory of the RPA data directory." DisplayName="Invoke Workflow File" sap:VirtualizedContainerService.HintSize="484,129" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="TakeAndSaveScreenshot.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="OutputFolder">
            <mva:VisualBasicValue x:TypeArguments="x:String" ExpressionText="testScreenshotFolder" />
          </InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="OutputFileName">
            <Literal x:TypeArguments="x:String">test-screenshot.png</Literal>
          </InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="ProcessMessage">
            <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="assertMessage" />
          </OutArgument>
          <OutArgument x:TypeArguments="x:Boolean" x:Key="ProcessSuccessful">
            <mva:VisualBasicReference x:TypeArguments="x:Boolean" ExpressionText="assertResult" />
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="ScreenshotFilePath">
            <mva:VisualBasicReference x:TypeArguments="x:String" ExpressionText="testScreenshotFileName" />
          </OutArgument>
        </ui:InvokeWorkflowFile.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeWorkflowFile>
      <If sap2010:Annotation.AnnotationText="If a screenshot was successfuly taken then delete the screenshot file and continue with further testing. Otherwise throw an exception." Condition="[assertResult = True]" sap:VirtualizedContainerService.HintSize="484,254" sap2010:WorkflowViewState.IdRef="If_3">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If.Then>
          <ui:Delete ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Delete the screenshot and continue with further testing." sap:VirtualizedContainerService.HintSize="200,64" sap2010:WorkflowViewState.IdRef="Delete_3" Path="[testScreenshotFileName]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:Delete>
        </If.Then>
        <If.Else>
          <Throw sap2010:Annotation.AnnotationText="Throw an exception as a away to halt testing." Exception="[new Exception(String.Format(&quot;Assertion failed. Message '{0}'&quot;, assertMessage))]" sap:VirtualizedContainerService.HintSize="200,64" sap2010:WorkflowViewState.IdRef="Throw_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </Throw>
        </If.Else>
      </If>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="484,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[&quot;Testing 'TakeAndSaveScreenshot': successfully tested with given filename and screenshots sub-directory of RPA data directory&quot;]" />
    </Sequence>
    <Sequence DisplayName="... Then" sap:VirtualizedContainerService.HintSize="576,153" sap2010:WorkflowViewState.IdRef="Sequence_4">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <uta:VerifyExpression KeepScreenshots="{x:Null}" ScreenshotsPath="{x:Null}" ContinueOnFailure="True" DisplayName="Verify Expression" Expression="[assertResult = True]" sap:VirtualizedContainerService.HintSize="534,61" sap2010:WorkflowViewState.IdRef="VerifyExpression_1" TakeScreenshotInCaseOfFailingAssertion="False" TakeScreenshotInCaseOfSucceedingAssertion="False" />
    </Sequence>
  </Sequence>
</Activity>